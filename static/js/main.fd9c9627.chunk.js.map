{"version":3,"sources":["Components/Climate/chart.js","Components/Climate/Climate.js","Components/PlugStates/Fan/FanButton.js","Components/PlugStates/Mister/MisterButton.js","Components/ToDo/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","options","data","Climate","state","weather","cloudCover","windSpeed","gauge","gaugeHumidity","fan","lineChartData","labels","datasets","id","type","label","backgroundColor","pointBorderColor","pointHoverBorderColor","borderColor","fill","borderWidth","lineTension","showLine","spanGaps","showPoint","lineChartOptions","responsive","maintainAspectRatio","title","text","display","tooltips","enabled","scales","yAxes","ticks","autoSkip","beginAtZero","gridLines","xAxes","maxTicksLimit","pieData","hoverBackgroundColor","indoorSubscription","messageType","temperature","Number","this","ws","WebSocket","onopen","obj","console","log","send","JSON","stringify","fetch","method","headers","Accept","authorization","then","res","json","oldTemp2DataSet","push","setState","description","catch","err","onmessage","e","value","parse","oldTempDataSet","newTempDataSet","PieDataSet1","splice","weatherImg","outsideData","newPieChartData","newTemp2DataSet","newPieData","newChart1Data","concat","Date","toLocaleTimeString","gaugeVal","humidity","gaugeHumidityVal","Container","className","Row","style","height","CardGroup","Card","fontSize","Title","Body","margin","padding","textAlign","forceRender","fluidWidth","minValue","maxValue","startColor","endColor","segments","needleColor","width","React","Component","Fan","buttonColor","fanSubscription","ws3","on","alignText","class","Mister","MisterSubscription","alignItems","ToDoList","newItem","list","key","Math","random","slice","updatedList","filter","item","length","map","onClick","deleteItem","placeholder","onChange","updateInput","target","addItem","App","fluid","Jumbotron","Col","sm","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fd9c9627.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Chart = props => <Line\r\n    options={props.options}\r\n    data ={props.data}\r\n     />;\r\nexport default Chart;","import React from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport LineChart from \"./chart\";\r\nimport ReactSpeedometer from \"react-d3-speedometer\";\r\nimport { Container, Col, Row, Card, CardGroup } from \"react-bootstrap\";\r\nimport './Climate.css'\r\n\r\nclass Climate extends React.Component {\r\n  state = {\r\n    weather: \"\",\r\n    cloudCover: 0,\r\n    windSpeed: 0,\r\n    gauge: {},\r\n    gaugeHumidity: {},\r\n    fan: {},\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          id: 0,\r\n          type: \"line\",\r\n          label: \"Indoor Temperature\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          pointBorderColor: \"rgba(100,200,100, 0)\",\r\n          pointHoverBorderColor: \"rgba(100,200,100, 1)\",\r\n          borderColor: \"rgba(135,206,250,1)\",\r\n          fill: true,\r\n          borderWidth: \"2\",\r\n          lineTension: 1,\r\n          data: [],\r\n          showLine: true,\r\n          spanGaps: true,\r\n          showPoint: false,\r\n        },\r\n        {\r\n          id: 1,\r\n          type: \"line\",\r\n          label: \"Outdoor Temperature\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          pointBorderColor: \"rgba(135,206,250,0)\",\r\n          pointHoverBorderColor: \"rgba(135,206,250,1)\",\r\n          borderColor: \"rgba(100,200,100, 1)\",\r\n          fill: true,\r\n          borderWidth: \"2\",\r\n          lineTension: 1,\r\n          data: [],\r\n          showLine: true,\r\n          spanGaps: true,\r\n          showPoint: false,\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      title: { text: \"Temperature Charts\", display: true },\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              beginAtZero: true,\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    pieData: {\r\n      labels: [\"clouds\", \"clear sky\"],\r\n      datasets: [\r\n        {\r\n          data: [0, 100],\r\n          backgroundColor: [\"#D3D3D3\", \"#00FFFF\"],\r\n          hoverBackgroundColor: [\"#A9A9A9\", \"#0000CD\"],\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  componentDidMount() {\r\n    const indoorSubscription = {\r\n      messageType: \"propertyStatus\",\r\n      data: {\r\n        temperature: Number,\r\n      },\r\n    };\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    this.ws = new WebSocket(\r\n      \"wss://sherringiscaring.mozilla-iot.org/things/http---192.168.1.111-things-DHTSensor?jwt=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRhMTJiNWY5LWVlNTAtNGFkMi1hNzNlLTg5ODVjODRhNTU3ZiJ9.eyJyb2xlIjoidXNlcl90b2tlbiIsImlhdCI6MTU5MTczNDAzMCwiaXNzIjoiaHR0cHM6Ly9zaGVycmluZ2lzY2FyaW5nLm1vemlsbGEtaW90Lm9yZyJ9.UGVluprHnYwU1IW8HGHi5KzIdAy0tPm6BwIaCFJmcuWfP2bO7LUpYmuDZzLTKaepW8ZO5N80EiIzzTfeqB7Xsg\",\r\n      \"webthing\"\r\n    );\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    this.ws.onopen = () => {\r\n      console.log(\"Connection Opened! (Inside Temp)\");\r\n      this.ws.send(JSON.stringify(indoorSubscription));\r\n      let obj;\r\n      fetch(\r\n        \"https://sherringiscaring.mozilla-iot.org/things/http---192.168.1.100-things-DHTSensor/properties\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            authorization:\r\n              \"Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjhjOWVhNjA3LWE1ZWQtNDEyZS1iYmUxLWU2Yjk4OTk3NzM3NyJ9.eyJyb2xlIjoidXNlcl90b2tlbiIsImlhdCI6MTU4OTc0ODIxNywiaXNzIjoiaHR0cHM6Ly9zaGVycmluZ2lzY2FyaW5nLm1vemlsbGEtaW90Lm9yZyJ9.BvpmWFRxZsgQ25BAUcWjqyXE-ZmXOllgZN6xUJ9THewr6ckyo-MEhjgicPfknK8_KoJ1wolSrMIH6Wz1IaC8Xg\",\r\n          },\r\n        }\r\n      )\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          obj = res;\r\n          console.log(res)\r\n          outsideData();\r\n          this.setState({\r\n            weather: `${res.description}`,\r\n            windSpeed: res.windSpeed,\r\n            cloudCover: res.cloudCover,\r\n            \r\n          });\r\n        })\r\n        .catch((err) => console.log(err));\r\n      function outsideData() {\r\n        oldTemp2DataSet.data.push(obj.temperature);\r\n      }\r\n      const oldTemp2DataSet = this.state.lineChartData.datasets[1];\r\n    };\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n\r\n      const oldTempDataSet = this.state.lineChartData.datasets[0];\r\n      const newTempDataSet = { ...oldTempDataSet };\r\n\r\n      if (value.data.temperature) {\r\n        // console.log(value.data);\r\n        var obj;\r\n        fetch(\r\n          \"https://sherringiscaring.mozilla-iot.org/things/weather-7122537431f4dc3d166c957717ee2b498815d683/properties\",\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              authorization:\r\n                \"Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjhjOWVhNjA3LWE1ZWQtNDEyZS1iYmUxLWU2Yjk4OTk3NzM3NyJ9.eyJyb2xlIjoidXNlcl90b2tlbiIsImlhdCI6MTU4OTc0ODIxNywiaXNzIjoiaHR0cHM6Ly9zaGVycmluZ2lzY2FyaW5nLm1vemlsbGEtaW90Lm9yZyJ9.BvpmWFRxZsgQ25BAUcWjqyXE-ZmXOllgZN6xUJ9THewr6ckyo-MEhjgicPfknK8_KoJ1wolSrMIH6Wz1IaC8Xg\",\r\n            },\r\n          }\r\n        )\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            obj = res;\r\n            outsideData();\r\n            this.setState({\r\n              weather: `${res.description}`,\r\n              windSpeed: res.windSpeed,\r\n              cloudCover: res.cloudCover,\r\n              pieData: newPieChartData,\r\n            });\r\n          })\r\n          .catch((err) => console.log(err));\r\n\r\n        const oldTemp2DataSet = this.state.lineChartData.datasets[1];\r\n        const PieDataSet1 = this.state.pieData.datasets[0];\r\n\r\n        function outsideData() {\r\n          oldTemp2DataSet.data.push(obj.temperature);\r\n          PieDataSet1.data.splice(0, 1, obj.cloudCover);\r\n          PieDataSet1.data.splice(1, 1, 100 - obj.cloudCover);\r\n          console.log(this.state.weatherImg)\r\n        }\r\n\r\n        const newTemp2DataSet = { ...oldTemp2DataSet };\r\n        newTempDataSet.data.push(value.data.temperature);\r\n        const newPieData = { ...PieDataSet1 };\r\n\r\n        const newChart1Data = {\r\n          ...this.state.lineChartData.datasets,\r\n          datasets: [newTempDataSet, newTemp2DataSet],\r\n          ...this.state.lineChartData.datasets[1],\r\n          datasets: [newTempDataSet, newTemp2DataSet],\r\n\r\n          labels: this.state.lineChartData.labels.concat(\r\n            new Date().toLocaleTimeString()\r\n          ),\r\n        };\r\n        const newPieChartData = {\r\n          ...this.state.pieData.datasets,\r\n          datasets: [newPieData],\r\n        };\r\n\r\n        const gaugeVal = value.data.temperature;\r\n        // console.log([this.state.lineChartData.datasets[0].data, this.state.lineChartData.datasets[1].data])\r\n        this.setState({ lineChartData: newChart1Data, gauge: gaugeVal });\r\n        console.log(this.state);\r\n      }\r\n      if (value.data.humidity) {\r\n        const gaugeHumidityVal = value.data.humidity;\r\n        this.setState({ gaugeHumidity: gaugeHumidityVal });\r\n      }\r\n    };\r\n  }\r\n  // MAX_TEMP_READINGS = 4610\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  render() {\r\n    return (\r\n      <Container className={'something'}>\r\n          <Row style={{height:\"40vh\"}}>\r\n            <LineChart\r\n              className=\"line chart\"\r\n              data={this.state.lineChartData}\r\n              options={this.state.lineChartOptions}\r\n            />\r\n          </Row>\r\n          <CardGroup>\r\n            <Card style = {{fontSize: \"calc(50% + 2vmin)\"}}>\r\n              <Card.Title>Current Indoor Temperature</Card.Title>\r\n              <Card.Body style={{margin: \"0\", padding: \"0\", textAlign: \"center\"}}>\r\n              <ReactSpeedometer\r\n                forceRender = {true}\r\n                fluidWidth={false}\r\n                minValue={10}\r\n                maxValue={30}\r\n                startColor=\"red\"\r\n                endColor=\"green\"\r\n                segments={5}\r\n                value={this.state.gauge}\r\n                needleColor=\"purple\"\r\n                height={150}\r\n                width={175}\r\n              />\r\n              </Card.Body>\r\n            </Card>\r\n            <Card style = {{fontSize: \"calc(50% + 2vmin)\"}}>\r\n              <Card.Title>Current Indoor Humidity</Card.Title>\r\n              <Card.Body style={{margin: \"0\", padding: \"0\", textAlign: \"center\"}}>\r\n              <ReactSpeedometer\r\n                forceRender = {true}\r\n                fluidWidth={false}\r\n                minValue={0}\r\n                maxValue={60}\r\n                startColor=\"red\"\r\n                endColor=\"green\"\r\n                segments={3}\r\n                value={this.state.gaugeHumidity}\r\n                needleColor=\"purple\"\r\n                height={150}\r\n                width={175}\r\n              />\r\n              </Card.Body>\r\n            </Card>\r\n            <Card style = {{ fontSize: \"calc(50% + 2vmin)\" }}>\r\n              Cloud Cover: {this.state.cloudCover}%\r\n              <Pie \r\n              // height={100}\r\n              // width={100}\r\n              // maintainAspectRatio={false}\r\n              data={this.state.pieData}\r\n              />\r\n            </Card>\r\n            <Card className={\"box4\"} style = {{ fontSize: \"calc(50% + 1vmin)\" }}>\r\n             <br />weather images being changed at the moment\r\n             <br />wind speed: {this.state.windSpeed} mph\r\n             <br />weather: {this.state.weather}\r\n            </Card>\r\n          </CardGroup>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Climate;\r\n","import React, { Component } from \"react\";\r\nimport './fanLight.css'\r\nimport {Container} from 'react-bootstrap'\r\n\r\n\r\n\r\n\r\nclass Fan extends Component {\r\n  state = { fan: \"\", buttonColor: '' };\r\n  componentDidMount() {\r\n    const fanSubscription = {\r\n      \"messageType\": \"propertyStatus\",\r\n      \"data\": {\r\n        //\"on\": true,\r\n        \"on\": true\r\n      },\r\n    };\r\n\r\n    this.ws3 = new WebSocket(\r\n      \"wss://sherringiscaring.mozilla-iot.org/things/tplink-8006FCBECD4C4C98FFDE442CEED8F07019989CAB?jwt=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRhMTJiNWY5LWVlNTAtNGFkMi1hNzNlLTg5ODVjODRhNTU3ZiJ9.eyJyb2xlIjoidXNlcl90b2tlbiIsImlhdCI6MTU5MTczNDAzMCwiaXNzIjoiaHR0cHM6Ly9zaGVycmluZ2lzY2FyaW5nLm1vemlsbGEtaW90Lm9yZyJ9.UGVluprHnYwU1IW8HGHi5KzIdAy0tPm6BwIaCFJmcuWfP2bO7LUpYmuDZzLTKaepW8ZO5N80EiIzzTfeqB7Xsg\",\r\n      \"webthing\"\r\n    );\r\n\r\n    this.ws3.onopen = () => {\r\n      console.log(\"Connection Opened! (Fan)\");\r\n      this.ws3.send(JSON.stringify(fanSubscription));\r\n    };\r\n\r\n    this.ws3.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.data.on == true) {\r\n        this.setState({ fan: \"on\", buttonColor: \"led-green\" });\r\n      }\r\n      else if (value.data.on == false){\r\n        this.setState({ fan: \"off\", buttonColor: \"led-red\" });\r\n      }\r\n    };\r\n  }\r\n\r\n    render(){\r\n        return(\r\n          <Container style={{alignText: \"center\"}}>\r\n            <div class={this.state.buttonColor}></div>\r\n            <p>Fan: {this.state.fan}</p>\r\n          </Container>\r\n        )\r\n    }\r\n}\r\nexport default Fan;","import React, { Component } from \"react\";\r\nimport {Container} from 'react-bootstrap'\r\n\r\n\r\n\r\nclass Mister extends Component {\r\n  state = { Mister: \"\", buttonColor: \"\" };\r\n  componentDidMount() {\r\n    const MisterSubscription = {\r\n      \"messageType\": \"propertyStatus\",\r\n      \"data\": {\r\n        \"on\": true,\r\n      },\r\n    };\r\n\r\n    this.ws = new WebSocket(\r\n      \"wss://sherringiscaring.mozilla-iot.org/things/tplink-8006289E78CEF13619AF8FDE7F8FE2B31B28BAFA?jwt=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjRhMTJiNWY5LWVlNTAtNGFkMi1hNzNlLTg5ODVjODRhNTU3ZiJ9.eyJyb2xlIjoidXNlcl90b2tlbiIsImlhdCI6MTU5MTczNDAzMCwiaXNzIjoiaHR0cHM6Ly9zaGVycmluZ2lzY2FyaW5nLm1vemlsbGEtaW90Lm9yZyJ9.UGVluprHnYwU1IW8HGHi5KzIdAy0tPm6BwIaCFJmcuWfP2bO7LUpYmuDZzLTKaepW8ZO5N80EiIzzTfeqB7Xsg\",\r\n      \"webthing\"\r\n    );\r\n\r\n    this.ws.onopen = () => {\r\n      console.log(\"Connection Opened! (Mister)\");\r\n      this.ws.send(JSON.stringify(MisterSubscription));\r\n    };\r\n\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.data.on == true) {\r\n        this.setState({ Mister: \"on\", buttonColor: \"led-green\" });\r\n      }\r\n      else if (value.data.on == false){\r\n        this.setState({ Mister: \"off\", buttonColor: \"led-red\" });\r\n      }\r\n    };\r\n  }\r\n\r\n    render(){\r\n        return(\r\n          <Container style={{alignItems:\"center\", alignText: \"center\"}}>\r\n            <div class={this.state.buttonColor}></div>\r\n            <p>Mister: {this.state.Mister}</p>\r\n          </Container>\r\n        )\r\n    }\r\n}\r\nexport default Mister;","import React, { Component } from \"react\";\r\nimport \"./todo.css\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nclass ToDoList extends Component {\r\n  state = {\r\n    newItem: \"\",\r\n    list: [],\r\n  };\r\n\r\n  updateInput(key, value) {\r\n    //update react state\r\n    this.setState({\r\n      [key]: value,\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    // create item with unique id\r\n    const newItem = {\r\n      id: 1 + Math.random(),\r\n      value: this.state.newItem.slice(),\r\n    };\r\n    // copy of current list of items\r\n    const list = [...this.state.list];\r\n    // add new item to list\r\n    list.push(newItem);\r\n    // update state with new list and reset\r\n    this.setState({\r\n      list,\r\n      newItem: \"\",\r\n    });\r\n  }\r\n\r\n  deleteItem(id) {\r\n    // copy current list of items\r\n    const list = [...this.state.list];\r\n    //filter out item being deleted\r\n    const updatedList = list.filter((item) => item.id !== id);\r\n    this.setState({ list: updatedList });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card className=\"todo\">\r\n        <Card.Title className=\"todo-title\">Farm To-Do-List</Card.Title>\r\n        <Card.Body>\r\n          {this.state.list.length < 1 ? (\r\n            <>\r\n              <p>Everything is currently taken care of!</p>\r\n              <p>\r\n                As parts of the farm need attention, such as water level going\r\n                too high, eratic sensor values, or weekly maintenance items, the\r\n                list will automatically populate\r\n              </p>\r\n            </>\r\n          ) : (\r\n            <ul>\r\n              {this.state.list.map((item) => {\r\n                return (\r\n                  <li key={item.id}>\r\n                    {item.value}\r\n                    <button onClick={() => this.deleteItem(item.id)}>\r\n                      <i class=\"material-icons\">x</i>\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          )}\r\n        </Card.Body>\r\n\r\n        <br />\r\n        <p>Or Add a Custom Item...</p>\r\n        <input\r\n          className=\"form\"\r\n          type=\"text\"\r\n          placeholder=\"type new item here\"\r\n          value={this.state.newItem}\r\n          onChange={(e) => this.updateInput(\"newItem\", e.target.value)}\r\n        />\r\n        <br />\r\n        <button className=\"add-btn btn-floating\" onClick={() => this.addItem()}>\r\n          <i>Add</i>\r\n        </button>\r\n        <br />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport Climate from \"./Components/Climate/Climate\";\r\nimport Fan from \"./Components/PlugStates/Fan/FanButton\";\r\nimport Mister from \"./Components/PlugStates/Mister/MisterButton\";\r\nimport \"./App.css\";\r\nimport ToDoList from \"./Components/ToDo/ToDoList\";\r\nimport { Container, Row, Col, Card, Jumbotron } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Container fluid>\r\n      <Jumbotron className=\"App-header\" style={{backgroundColor:\"black\", height: \"1vh\", margin: \"0\"}}>\r\n        Undergoing maintenance for adding sensors and responsiveness on different screen sizes. May seem strange on a smaller screen or completely broken on a phone.\r\n        Enjoy some climate data in the meantime...\r\n      </Jumbotron>\r\n      <Container fluid>\r\n        <Col sm={1} md={2} lg={9} className=\"col-1\">\r\n          <Climate />\r\n        </Col>\r\n        <Col sm={1} md={2} lg={2} className=\"col-2\">\r\n          {/* <Row style={{ height: \"75vh\" }}> */}\r\n            <ToDoList  />\r\n          {/* </Row> */}\r\n          {/* <Row style={{ height: \"10vh\", marginTop: \"5vh\" }}> */}\r\n            <Card\r\n              // style={{\r\n              //   height: \"100%\",\r\n              //   width: \"100%\",\r\n              //   padding: \"0\",\r\n              //   margin: \"0\",\r\n              // }}\r\n            >\r\n              {/* <Row> */}\r\n                <Col>\r\n                  <Fan />\r\n                </Col>\r\n                <Col>\r\n                  <Mister />\r\n                </Col>\r\n              {/* </Row> */}\r\n            </Card>\r\n          {/* </Row> */}\r\n        </Col>\r\n    </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}